import React from "react";
import moment from "moment";
import {Day, DayShadow} from "./day";
import PropTypes from "prop-types";

const monthWeekLength = 5;
export default class ListDays extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      arrayList: [],
    };
  }
  
  componentWillMount() {
    this.setArrayList(monthWeekLength, this.props);
  }
  
  componentWillReceiveProps(nextProps) {
    if (nextProps.date !== this.props.date) this.setArrayList(monthWeekLength, nextProps.date);
  }
  
  getStartEndMonth = (date) => ({
    start: moment(date.date ? date.date : date, this.context.format).startOf("month").startOf("week"),
    end: moment(date.date ? date.date : date, this.context.format).endOf("month").endOf("week")
  });
  
  setArrayList = (sizeWeeks, date) => {
    const arrayList = [];
    let startMonth = this.getStartEndMonth(date).start;
    for (let weekNumber = 0; weekNumber <= sizeWeeks; weekNumber++) {
      for (let dayNumber = 0; dayNumber <= 6; dayNumber++) {
        arrayList.push(moment(startMonth).add({week: weekNumber, days: dayNumber}));
      }
    }
    this.setState({arrayList});
  };

  renderLimit = (day, min, max) => {
    if(day.isAfter(min) && day.isBefore(max)) {
      return <Day
        dateMonth={this.props.date}
        key={day.format(this.context.format)}
        day={day}
      />;
    } else return <DayShadow
      dateMonth={this.props.date}
      setMonth={this.props.setNumberMonth}
      key={day.format(this.context.format)}
      day={day}
    />;
  };
  
  renderDays = () => {
    const minLimit = this.context.activeRange.from ?
      moment(this.context.activeRange.from, this.context.format).subtract(this.context.limit + 1, "days") : null;
    const maxLimit = this.context.activeRange.from ?
      moment(this.context.activeRange.from, this.context.format).add(this.context.limit + 1, "days") : null;
    return this.state.arrayList.map((day) => {
      if (day.month() !== moment(this.props.date, this.context.format).month()) {
        return <DayShadow
          dateMonth={this.props.date}
          setMonth={this.props.setNumberMonth}
          key={day.format(this.context.format)}
          day={day}
        />;
      } else {
        if(this.context.activeRange.from && this.context.limit) {
          return this.renderLimit(day, minLimit, maxLimit);
        } else {
          return <Day
            dateMonth={this.props.date}
            key={day.format(this.context.format)}
            day={day}
          />;
        }
      }
    });
  };
  
  render() {
    return <div className="Date-Month__month">{this.renderDays()}</div>;
  }
}

ListDays.contextTypes = {
  format: PropTypes.string,
  limit: PropTypes.number,
  activeRange: PropTypes.object,
};