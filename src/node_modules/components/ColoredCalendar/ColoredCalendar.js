import React from "react";
import moment from "moment";
import MonthPiker from "./MonthPicker";
import PropTypes from "prop-types";
import "moment/locale/ru";
import "./ColoredCalendar.css";

export default class ColoredCalendar extends React.Component {
  constructor() {
    super();
    this.state = {
      activeRange: {from: null,to: null},
      activeMonths: {left: null, right: null},
    };
    this.setRange = this.setRange.bind(this);
    this.setActiveMonth = this.setActiveMonth.bind(this);
  }
  
  getChildContext() {
    return {
      colors: this.props.colors,
      setActiveMonth: this.setActiveMonth,
      activeRange: this.state.activeRange,
      setRange: this.setRange,
      switchMonth: this.props.switchMonth,
      limit: this.props.limit,
    };
  }
  
  componentWillMount() {
    moment.locale(this.props.lang, {
      week: {dom: 1}
    });
    this.setState(prevState => {
      prevState.activeMonths.left = this.props.initPicker.from;
      prevState.activeMonths.right = this.props.initPicker.to;
      if (this.props.range){
        prevState.activeRange.from = this.props.range.from;
        prevState.activeRange.to = this.props.range.to;
      }
      return prevState;
    });
  }
  
  setRange(value) {
    this.setState(prevState => {
      if (prevState.activeRange.from && prevState.activeRange.to) {
        prevState.activeRange.from = null;
        prevState.activeRange.to = null;
        prevState.activeRange.from ? prevState.activeRange.to = value : prevState.activeRange.from = value;
      } else {
        if (prevState.activeRange.from) {
          if (prevState.activeRange.from > value) {
            prevState.activeRange.to = prevState.activeRange.from;
            prevState.activeRange.from = value;
          } else prevState.activeRange.to = value;
        } else prevState.activeRange.from = value;
      }
      return prevState;
    }, () => this.props.switchDays(this.state.activeRange));
  }
  
  setActiveMonth(type, date) {
    this.setState(prevState => {
      prevState.activeMonths[type] = date;
      return prevState;
    });
  }
  
  render() {
    return (
      <div className="Date-RangePicker">
        <MonthPiker
          key="left"
          type={"left"}
          date={this.props.initPicker.from}
          skipMonth={this.state.activeMonths.right}
        />
        <MonthPiker
          key="right"
          type={"right"}
          date={this.props.initPicker.to}
          skipMonth={this.state.activeMonths.left}
        />
      </div>
    );
  }
}

ColoredCalendar.defaultProps = {
  initPicker: {
    from: moment(`${moment().format("YYMM")}01000000000`, "YYMMDDHHmmss000"),
    to: moment(`${moment().add(1, "month").format("YYMMDD")}135900000`, "YYMMDDHHmmss000"),
  },
  lang: "ru",
  limit: 0,
};

ColoredCalendar.PropType = {
  colors: PropTypes.array,
  switchMonth: PropTypes.func,
  switchDays: PropTypes.func,
};

ColoredCalendar.childContextTypes = {
  colors: PropTypes.array,
  setActiveMonth: PropTypes.func,
  activeRange: PropTypes.object,
  setRange: PropTypes.func,
  switchMonth: PropTypes.func,
  limit: PropTypes.number,
};