import React from "react";
import PropTypes from "prop-types";
import moment from "moment/moment";
import { get } from "lodash";

export const Day = (props, context) => {
  const {day} = props;
  const {oneActiveDay, setRange, colors, format} = context;
  if(get(context, 'activeRange.from')) {
    console.log(moment(day).format(format), get(context, 'activeRange.from').format(format));
  }
  const active = get(context, 'activeRange.from') ?
    moment(day) < moment(context.activeRange.to) && moment(day) > moment(context.activeRange.from) ? "--active" :
      moment(day).format(format) === moment(get(context, 'activeRange.to')).format(format) ? "--end" :
        moment(day).format(format) === moment(get(context, 'activeRange.from')).format(format) ? "--start" : "" : "";
  const today = moment(day).format(format) === moment().format(format);
  const activeSolo = moment(oneActiveDay).format(format) === moment(day).format(format) && !today;
  const colorItem = colors && colors.length ? colors.find((color) => color.day === moment(day).format("DD") && color.month === moment(day).format("MM") && color.year === moment(day).format("YY")) : null;
  return (
    <div
      onClick={() => setRange(day)}
      style={activeSolo ? {background: "#4CC802"} : colorItem ? {background: colorItem.color} : null}
      className={`Date-Month__day Date-Month__day${active}${today ? " today" : ""}`}
    >{day.format("DD")}</div>
  );
};

export const DayShadow = (props, context) => {
  const {day} = props;
  const from = get(props, 'activeRange.from');
  const to = get(props, 'activeRange.to');
  const active = from ? moment(day) < moment(to) && moment(day) > moment(from) ? "--active" :
    moment(day).format(context.format) === moment(to).format(context.format) ? "--start" :
      moment(day).format(context.format) === moment(from).format(context.format) : "";
  return (
    <div
      className={`Date-Month__day Date-Month__day--shadow ${active}`}
    >{day.format("DD")}</div>
  );
};

Day.propTypes = {
  dateMonth: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.object
  ]),
  dat: PropTypes.object
};

DayShadow.propTypes = {
  dateMonth: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.object
  ]),
  dat: PropTypes.object,
  setMonth: PropTypes.func
};

Day.contextTypes = {
  format: PropTypes.string,
  activeRange: PropTypes.object,
  setRange: PropTypes.func,
  setColor: PropTypes.func,
  colors: PropTypes.array,
  oneActiveDay: PropTypes.object,
};

DayShadow.contextTypes = {
  format: PropTypes.string,
  activeRange: PropTypes.object,
};