import React from "react";
import moment from "moment";
import MonthPiker from "./monthPicker";
import PropTypes from "prop-types";
import "./style.css";

export default class SingleCalendar extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      activeMonth: null,
      activeRange: {from: null,to: null}
    };
  }
  getChildContext() {
    return {
      format: this.props.format,
      colors: this.props.colors,
      setActiveMonth: this.setActiveMonth,
      activeRange: this.state.activeRange,
      setRange: this.setRange,
      limit: this.props.limit,
    };
  }
  componentWillMount() {
    moment.locale(this.props.lang, {
      week: {dom: this.props.firstDayOfWeek}
    });
    this.setState(prevState => {
      prevState.activeMonth = this.props.initPicker;
      return prevState;
    });
  }

  setRange = (value) => {
    this.setState(prevState => {
      if (prevState.activeRange.from && prevState.activeRange.to) {
        prevState.activeRange.from = null;
        prevState.activeRange.to = null;
        prevState.activeRange.from ? prevState.activeRange.to = value : prevState.activeRange.from = value;
      } else {
        if (prevState.activeRange.from) {
          if (prevState.activeRange.from > value) {
            prevState.activeRange.to = prevState.activeRange.from;
            prevState.activeRange.from = value;
          } else prevState.activeRange.to = value;
        } else prevState.activeRange.from = value;
      }
      return prevState;
    }, () => this.props.switchDays(this.state.activeRange));
  };

  setActiveMonth = (date) => {
    this.setState({activeMonths: date}, this.props.switchMonth(date));
  };

  render() {
    return (
      <div className="Date-RangePicker">
        <MonthPiker
          type={"left"}
          date={this.state.activeMonth}
        />
      </div>
    );
  }
}

SingleCalendar.defaultProps = {
  format: "YY.MM.DD",
  initPicker: moment().format("YY.MM.DD"),
  lang: "en",
  limit: 0,
  firstDayOfWeek: 1,
  colors: [],
  switchDays: () => {},
  switchMonth: () => {}
};

SingleCalendar.PropType = {
  firstDayOfWeek: PropTypes.number,
  initDate: PropTypes.object,
  limit: PropTypes.number,
  lang: PropTypes.string,
  colors: PropTypes.array,
  switchMonth: PropTypes.func,
  switchDays: PropTypes.func,
};

SingleCalendar.childContextTypes = {
  format: PropTypes.string,
  colors: PropTypes.array,
  setActiveMonth: PropTypes.func,
  activeRange: PropTypes.object,
  setRange: PropTypes.func,
  limit: PropTypes.number,
};