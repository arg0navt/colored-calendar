import React from "react";
import ListDays from "./ListDays";
import moment from "moment";
import PropTypes from "prop-types";

export default class MonthPiker extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      month: this.props.date,
      number: 0,
    };
    this.setNumberMonth = this.setNumberMonth.bind(this);
  }
  
  setNumberMonth(type){
    this.setState(prevState => {
      let monthDate = moment(prevState.month),
        active = type === "next" ? monthDate.add(1, "month").startOf("month").format("DDMMYY") : monthDate.subtract(1, "month").startOf("month").format("DDMMYY");
      if (this.props.skipMonth && (active === this.props.skipMonth.startOf("month").format("DDMMYY"))) {
        prevState.number = type === "next" ? this.state.number + 2 : this.state.number - 2;
      } else prevState.number = type === "next" ? this.state.number + 1 : this.state.number - 1;
      return prevState;
    }, () => this.setMonth());
  }
  
  setMonth() {
    this.setState({
      month: moment(this.props.date).add(this.state.number, "month"),
    }, () => {
      this.context.setActiveMonth(this.props.type, this.state.month);
      this.context.switchMonth(this.props.type, this.state.month);
    });
  }
  
  render() {
    return (
      <div className="Date-Month">
        <div className="Date-Month__control">
          <button
            className="Date-Month__button Date-Month__button--prev"
            onClick={() => this.setNumberMonth('prev')}
          ><i/></button>
          {moment(this.state.month).format("MMMM-YYYY")}
          <button
            className="Date-Month__button Date-Month__button--next"
            onClick={() => this.setNumberMonth('next')}
          ><i/></button>
        </div>
        <div>
          <div className="Date-Month__daysWeek">{moment(this.state.month)._locale._weekdaysMin.map((dayWeek) => <div key={dayWeek} className="Date-Month__dayWeek">{dayWeek}</div>)}</div>
          <ListDays
            date={this.state.month}
            setNumberMonth={this.setNumberMonth}
          />
        </div>
      </div>
    );
  }
}

MonthPiker.PropTypes = {
  type: PropTypes.string,
  date: PropTypes.string,
  switchMonth: PropTypes.func,
};

MonthPiker.contextTypes = {
  setActiveMonth: PropTypes.func,
  setRange: PropTypes.func,
  switchMonth: PropTypes.func,
};