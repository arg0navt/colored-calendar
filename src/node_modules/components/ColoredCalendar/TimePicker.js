import React from "react";
import Hammer from "react-hammerjs";

const TimeHours = (set) => [...Array(12)].map((hourse, index) => <div onClick={() => set(index + 1)}
                                                                      className="Date-Month__hour"
                                                                      key={`hourse${index}`}>{index + 1}</div>);
const TimeMinutes = (value, setDate) => [...Array(60)].map((minutes, index) => <div
  className={`Date-Month__m-item ${value === index ? "active" : ""}`}
  onClick={() => setDate(index)}
  key={`minutes${index}`}>{index < 10 ? `0${index}` : index}</div>);

export default class TimePicker extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      hours: props.hours,
    };
    this.setTime = this.setTime.bind(this);
  }
  
  setTime(hours) {
    this.setState({hours});
  }
  
  render() {
    return (
      <div>
        <div className="Date-Month__am-pm">
          <button className={`Date-Month__am ${this.state.hours < 12 ? "active" : ""}`}>Am</button>
          <button className={`Date-Month__pm ${this.state.hours >= 12 ? "active" : ""}`}>Pm</button>
        </div>
        <div className="Date-Month__time">
          <div className="Date-Month__center" style={{transform: `rotate(${this.state.hours * (360 / 12)}deg)`}}/>
          <div className="Date-Month__hours">
            {TimeHours(this.setTime)}
          </div>
        </div>
        <SectionMinutes
          minutes={this.props.minutes}
        />
      </div>
    );
  }
};

class SectionMinutes extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      x:0,
      z:0,
      value: props.minutes,
    };
    this.start = this.start.bind(this);
    this.pan = this.pan.bind(this);
    this.end = this.end.bind(this);
    this.setDate = this.setDate.bind(this);
  }
  
  start(){
    this.setState({x: this.state.z});
  }
  pan(e){
    let newRange = this.state.z + e.deltaX;
    const maxRange = -1330;
    if (newRange < maxRange) {
      newRange = maxRange;
    }
    if (newRange < 0 && this.state.x >= maxRange) {
      this.setState({x: newRange});
    }
  }
  end(){
    this.setState({x: this.state.x, z:this.state.x});
  }
  
  setDate(value) {
    this.setState({value});
  }
  
  render() {
    return (
      <div className="Date-Month__m">
        <div className="Date-Month__m-active">
          <Hammer onPanStart={() => this.start()} onPan={(e) => this.pan(e)} onPanEnd={() => this.end()} >
            <div ref={(list) => this.list = list} className="Date-Month__m-list" style={{transform: `translate3d(${this.state.x}px, 0px, 0px)`}}>
              {TimeMinutes(this.state.value, this.setDate)}
            </div>
          </Hammer>
        </div>
      </div>
    );
  }
};